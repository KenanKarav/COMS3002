Test Description:

Due to the scope of the testing only being one module, it is unnecessary to perform integration testing, as such,
unit testing has been performed on this module with checks on:

1. Given valid input, is the correct output produced?
2. Given edge cases as input, is the correct output produced?
3. Given invalid input, are the correct exceptions raised?

Scenarios

1. Non perfect square X

    Due to the optimization made to only search for primes less than the square root of x, it is important to test the
    edge cases when x is not a perfect square, this detects a potential off-by-one error.

     Input given: x = 80;
     Expected Output datatype: List
     Expected Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79];

2. Input not a number

    This scenario tests whether the algorithm can raise the correct exceptions for invalid input.

    Input given: '100'
    Expected Output: TypeError Raised

    Input given: 'six'
    Expected Output: TypeError Raised

3. Too large input - time taken more than

    This scenario tests whether the algorithm will time out if too large input is selected.

4. Below 2 input

    This scenario tests various edge cases where there are no prime numbers produced by the algorithm.

    Input given: 1
    Expected Output: ValueError Raised

    Input given: 0
    Expected Output: ValueError Raised

    Input given: -1
    Expected Output: ValueError Raised

5. Correct output - small number

    This scenario tests the correctness for valid small input

    Input given: 3
    Expected Output Datatype: List
    Expected Output: [2,3]

6. correct output - large number

This scenario tests the correctness for valid large input

    Input given: 100
    Expected Output Datatype: List
    Expected Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]